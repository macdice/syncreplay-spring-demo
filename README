This is a test Java/Spring application for experimenting with the proposed
PostgreSQL feature "synchronous replay".  It is intended to show that typical
modern application stacks could make practical use of the semantics provided
by that feature.

The application is a simple RESTful key/value store, which can be accessed
like so:

 $ curl -X PUT -H "Content-Type: text/plain" -d 'b' localhost:9000/key-value/a
 {"key":"a","value":"b"}
 $ curl localhost:9000/key-value/a
 {"key":"a","value":"b"}

GET requests are sent to randomly chosen read-only replica database servers
and PUT requests should go to the primary database server.  GET requests
always see the most recently PUT value for any key (no replication lag), and
failing replica database servers should have a limited impact on the primary
server and application.

The application code is in KeyValueController.java and contains no special
handling for retrying or rerouting and could be used against a single database
server.

Then two alternative configurations are shown that allow for distrbuting query
processing:

1.  DeclarativeRoutingInterceptor relies on application-provided
    annotations using Spring's @Transactional(readOnly=X) to know whether
    each transactional method needs a read-write or read-only connection.

2.  AdaptiveRoutingInterceptor learns as it goes, routing all
    transactional methods to read-only servers until it learns that they need
    a read-write connection.  This approach doesn't need any annotations.

The choice of those two strategies is made in aop-config.xml.  Finally, the
configuration of the DataSource that makes transaction routing possible is
in database-config.xml.

This requires a set of PostgreSQL servers running the latest master code
patched with this:

 https://www.postgresql.org/message-id/CAEepm%3D0YigNQczAF-%3Dx_SxT6cJv77Yb0EO%2BcAFnqRyVu4%2BbKFw%40mail.gmail.com

The script accompanying the above patch may be useful to start replica
servers.  A table must be created first:

 CREATE TABLE key_value (key text PRIMARY KEY, value text NOT NULL);

This is work in progress, pull requests welcome!
